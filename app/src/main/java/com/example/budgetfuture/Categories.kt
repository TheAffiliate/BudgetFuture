package com.example.budgetfuture

import android.app.Activity
import android.app.DatePickerDialog
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.room.Room
import com.example.budgetfuture.database.ExpenseDatabase
import com.example.budgetfuture.database.ExpenseEntity
import com.example.budgetfuture.databinding.ActivityCategoriesBinding
import com.example.budgetfuture.utils.Constants.EXPENSE_DATABASE
import java.text.SimpleDateFormat
import java.util.*

class Categories : AppCompatActivity() {

    private lateinit var binding: ActivityCategoriesBinding

    // This will store the picked date
    private var selectedDate: Date? = null

    // This will store the picked image URI
    private var selectedImageUri: Uri? = null

    // Image picking request code
    private val PICK_IMAGE_REQUEST = 101

    // Room database instance
    private val expenseDB: ExpenseDatabase by lazy {
        Room.databaseBuilder(this, ExpenseDatabase::class.java, EXPENSE_DATABASE)
            .allowMainThreadQueries()
            .fallbackToDestructiveMigration()
            .build()
    }

    private lateinit var expenseEntity: ExpenseEntity

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityCategoriesBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Handle when user clicks on the date field
        binding.editDate.setOnClickListener {
            showDatePicker()
        }

        // Save expense button click
        binding.button5.setOnClickListener {
            validateAndSaveExpense()
        }

        // Handle image attach button click
        binding.buttonAttachPhoto.setOnClickListener {
            openGalleryForImage()
        }

        // Allow image view click to re-select photo
        binding.imageViewAttached.setOnClickListener {
            openGalleryForImage()
        }
    }

    // Open the gallery to pick an image
    private fun openGalleryForImage() {
        val intent = Intent(Intent.ACTION_PICK)
        intent.type = "image/*"
        startActivityForResult(intent, PICK_IMAGE_REQUEST)
    }

    // Show date picker dialog
    private fun showDatePicker() {
        val calendar = Calendar.getInstance()
        val datePicker = DatePickerDialog(
            this,
            { _, year, month, dayOfMonth ->
                calendar.set(year, month, dayOfMonth)
                selectedDate = calendar.time

                // Show selected date
                val format = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
                binding.editDate.setText(format.format(selectedDate!!))
            },
            calendar.get(Calendar.YEAR),
            calendar.get(Calendar.MONTH),
            calendar.get(Calendar.DAY_OF_MONTH)
        )
        datePicker.show()
    }

    // Handle image result
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (requestCode == PICK_IMAGE_REQUEST && resultCode == Activity.RESULT_OK && data != null) {
            selectedImageUri = data.data
            binding.imageViewAttached.setImageURI(selectedImageUri)
        }
    }

    // Validation and saving of the expenses
    private fun validateAndSaveExpense() {
        val categoryName = binding.editCategory.text.toString().trim()
        val amountText = binding.editAmount.text.toString().trim()
        val description = binding.editDescription.text.toString().trim()
        val imagePath = selectedImageUri?.toString()  // Save URI as string

        if (categoryName.isEmpty()) {
            binding.editCategory.error = "Category name is required"
            return
        }

        if (amountText.isEmpty()) {
            binding.editAmount.error = "Amount is required"
            return
        }

        val amount = try {
            amountText.toDouble()
        } catch (e: NumberFormatException) {
            binding.editAmount.error = "Please enter a valid number"
            return
        }

        if (description.isEmpty()) {
            binding.editDescription.error = "Description is required"
            return
        }

        if (selectedDate == null) {
            binding.editDate.error = "Please select a date"
            return
        }

        // Passed all validation â†’ Create ExpenseEntity
        expenseEntity = ExpenseEntity(
            ExpenseId = 0, // Auto-generated by Room
            CategoryName = categoryName,
            DateOfExpense = selectedDate!!,
            amount = amount,
            Description = description,
            imagePath = imagePath
        )

        // Insert into database
        expenseDB.dao().insertExpense(expenseEntity)

        Toast.makeText(this, "Expense Saved Successfully!", Toast.LENGTH_SHORT).show()

        // Finish or clear form
        finish()
    }
}
